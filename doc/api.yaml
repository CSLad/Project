openapi: 3.0.0
info:
  title: WasaPhoto
  version: 1.0.7
  description: API documentation for WASAphoto

tags:
  - name: auth
    description: Authentication operations
  - name: user
    description: User operations
  - name: image
    description: Image operations
  - name: follow
    description: Follow operations

paths:
  /session:
    post:
      tags: ['auth']
      summary: User Login
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: Login details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: Successful login into existing account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Username"
                  
        '201':
          description: Successful sign up and login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Username"
        '400':
          description: Bad request

  /users/{username}:
    parameters:
    - name: username
      in: path
      required: true
      description: this is the username
      schema:
        $ref: "#/components/schemas/Username"
    put:
      tags: ["user"]
      summary: Set User Username
      description: |
        Allows the user to change/set their username
      operationId: setMyUserName
      requestBody:
        description: New username for the user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Username"
        '400':
          description: Bad request 
    get:
      tags: ['user']
      summary: Get User Profile
      description: |
        Get the information of a users profile. His photos, and other details.
      operationId: getUserProfile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  User info as well as their stream
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"
                  Images:
                    type: array
                    items:
                      $ref: "#/components/schemas/imageUrl"
                    minItems: 0
                    maxItems: 10
        '404':
          description: User not found

  /users/{username}/follow:
    parameters:
    - name: username
      in: path
      required: true
      description: this is the username
      schema:
        $ref: "#/components/schemas/Username"
    put:
      tags: ['follow'] 
      summary: Follow User
      description: |
        Post function to follow a user
      operationId: followUser
      requestBody:
        description: ID of the user to follow
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                Username of the follow whom to follow
              properties:
                Username:
                  $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: | 
            User followed successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the usernames of the user who follows and the user being followed
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"
                  followedUsername:
                    $ref: "#/components/schemas/Username"
        '404':
          description: User not found
    delete:
      tags: ['follow']
      summary: Unfollow User
      description: |
        Unfollow the desired user
      operationId: unfollowUser
      requestBody:
        description: ID of the user to unfollow
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                The username of the user whom to unfollow
              properties:  
                Username:
                  $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the usernames of the user who unfollows and the user being unfollowed
                properties:
                  username:
                    $ref: "#/components/schemas/Username"
                  unfollowedUsername:
                    $ref: "#/components/schemas/Username"
        '404':
          description: User not found

  /users/{username}/ban:
    parameters:
    - name: username
      in: path
      required: true
      description: this is the username
      schema:
        $ref: "#/components/schemas/Username"
    put:
      tags: ['user']
      summary: Ban User
      description: |
        Ban a user from viewing another users images and visa vers
      operationId: banUser
      requestBody:
        description: |
          username of the user to ban
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                the username of the user to ban
              properties:
                Username:
                  $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: User banned successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the username of the "banner" and the "banee"
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"
                  bannedUsername:
                    $ref: "#/components/schemas/Username"
        '404':
          description: User not found
    delete:
      tags: ["user"]
      summary: Unban User
      description: |
        Unban a user to view his images and allow him to view the users images
      operationId: unbanUser
      requestBody:
        description: username of the user to unban
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                the username of the user to unban
              properties:
                Username:
                  $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: User unbanned successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the usernames of the "unbanner" and the "unbanee"
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"
                  UnbannedUsername:
                    $ref: "#/components/schemas/Username"
        '404':
          description: User not found

  /users/{username}/stream:
    parameters:
    - name: username
      in: path
      required: true
      description: this is the username
      schema:
        $ref: "#/components/schemas/Username"
    get:
      tags: ['user']
      summary: Get User Stream
      description: |
        Get the stream that is show to a user
      operationId: getMyStream
      responses:
        '200':
          description: User stream retrieved successfully
          content:
            application/json:
              schema:
                description: Stream of photos
                type: object
                properties:
                  username:
                    $ref: "#/components/schemas/Username"
                  images:
                    type: array
                    description: "list of images"
                    items:
                      $ref: "#/components/schemas/imageUrl"
                    minItems: 0
                    maxItems: 10
        '404':
          description: User not found

  /images/{imageurl}:
    parameters:
    - name: imageurl
      in: path
      required: true
      description: this is the id of the image
      schema:
        $ref: "#/components/schemas/imageUrl"
    post:
      tags: ['image']
      summary: Upload Photo
      description: |
        If the photo is of the correct datatype
        (jpg, png, jpeg etc.) upload the photo
      operationId: uploadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: |
                The user that posted the image
              properties:
                Username:
                  $ref: "#/components/schemas/Username"
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the id of the user that posted, and the id of the photo
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"                    
                  imageUrl:
                    $ref: "#/components/schemas/imageUrl"
        '400':
          description: Bad request
    delete:
      tags: ['image']
      summary: Delete Photo
      description: |
        Remove a posted photo
      operationId: deletePhoto
      parameters:
        - name: imageurl
          in: query
          description: ID of the photo to delete
          required: true
          schema:
            $ref: "#/components/schemas/imageUrl"
      responses:
        '200':
          description: Photo deleted successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the id of the user who deleted the photo, and the id of the photo that got deleted
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"                    
                  imageUrl:
                    $ref: "#/components/schemas/imageUrl"
        '404':
          description: Photo not found

  /images/{imageurl}/like:
    parameters:
    - name: imageurl
      in: path
      required: true
      description: this is the id of the image
      schema:
        $ref: "#/components/schemas/imageUrl"
    put:
      tags: ['image']
      summary: Like Image
      description: |
        Like a specific image
      operationId: likePhoto
      requestBody:
        description: url of the photo to like
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                the id of the photo to like
              properties:
                imageUrl:
                  $ref: "#/components/schemas/imageUrl"
      responses:
        '200':
          description: Photo liked successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the id of the person liking, and the photo that gets the like
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"                    
                  imageUrl:
                    $ref: "#/components/schemas/imageUrl"
        '404':
          description: Photo not found
    delete:
      tags: ['image']
      summary: Unlike Photo
      operationId: unlikePhoto
      description: |
        Remove the like from an image
      requestBody:
        description: ID of the photo to unlike
        required: true
        content:
          application/json:
            schema:
              type: object
              description: the id of the photo that's getting unliked
              properties:
                 imageUrl:
                  $ref: "#/components/schemas/imageUrl"
      responses:
        '200':
          description: Photo unliked successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the id of the user that unlikes and the id of the photo being unliked
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"                    
                  imageUrl:
                    $ref: "#/components/schemas/imageUrl"
        '404':
          description: Photo not found

  /images/{imageurl}/comment:
    parameters:
    - name: imageurl
      in: path
      required: true
      description: this is the id of the image
      schema:
        $ref: "#/components/schemas/imageUrl"
    put:
      tags: ['image']
      summary: Comment on Photo
      description: |
        inserting a comment under an image
      operationId: addComment
      requestBody:
        description: ID of the photo to comment on
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                the id of the photo that is getting a comment and the comment
              properties:
                photoId:
                  $ref: "#/components/schemas/imageUrl"
                comment:
                  description: |
                    a comment that is written under an image
                  type: string
                  minLength: 1
                  maxLength: 140
                  pattern: '^.*?$'
                  example: good
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the id of the user that comments and the image under which the comment is made
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"                    
                  imageUrl:
                    $ref: "#/components/schemas/imageUrl"
        '404':
          description: Photo not found
    delete:
      tags: ['image']
      summary: Remove Comment from Photo
      description: |
        removing a comment under an image
      operationId: removePhoto
      requestBody:
        description: ID of the photo to remove comment from
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                the id of the photo getting and uncomment and the comment that needs to be removed
              properties:
                imageUrl:
                  $ref: "#/components/schemas/imageUrl"
                comment:
                  description: |
                    a comment to be removed from under an image
                  type: string
                  minLength: 1
                  maxLength: 140
                  pattern: '^.*?$'
                  example: good

      responses:
        '200':
          description: Comment removed successfully
          content:
            application/json:
              schema:
                type: object
                description: |
                  the id of the user who removed the comment and the photo from which it was removed
                properties:
                  Username:
                    $ref: "#/components/schemas/Username"                    
                  imageUrl:
                    $ref: "#/components/schemas/imageUrl"
        '404':
          description: Photo or Comment not found

components:
  schemas:
    Username:
      description: |
        Unique username of a user.
      type: string
      example: illuha
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16
    
    Photo:
      description: |
        Photo wtih information related to the photo.
      type: object
      properties:
        imageUrl:
          $ref: "#/components/schemas/imageUrl"
        Username:
          $ref: "#/components/schemas/Username"
        date:
          description: |
            Date and time at which the image was posted
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          minLength: 20
          maxLength: 20
        likes:
          description: |
            the sum of the likes that the image recieved
          type: integer
          minimum: 0
          example: 10
        comments:
          description: |
            the sum of the comments that the post recieved
          type: integer
          minimum: 0 
          example: 10
    imageUrl:
          description: |
            Url of the image that has been posted
          type: string
          minLength: 8
          maxLength: 140
          pattern: '^.*?$'
          example: https://static.semrush.com/blog/uploads/media/c5/d8/c5d899c34268c5bde3f08dfc7f98eb0d/original.png

  securitySchemes:
    UserAuth:
      description: |
        required security measure
      type: http
      scheme: bearer

security:
  - UserAuth: []